#!/bin/bash

# ============================================================================
# This file is meant to hold all common functions to be used across the
# install scripts under this project
# ============================================================================

# Uncomment the following line to debug this script
# set -o xtrace

#=================================================
# GLOBAL VARIABLES DEFINITION
#=================================================
_ORIGINAL_PROXY=''
_PROXY=''
_DOMAIN=',intel.com,.intel.com'
_PACKAGE_MANAGER='apt'
_INSTALLER_CMD='apt-get install -y'
_SSH_CMD=''
#=================================================
# GLOBAL FUNCTIONS
#=================================================

function AddUser {
: 'Adds a user to system [Ubuntu or Centos]. Password disabled.
Positional arguments:
    1: Username
    2: Password
Optional arguments:
    3: sudoer
        Defaults to True
        If True - User is added to the sudoers group
        If False - User is not within sudoers'

    AddUser"${_PACKAGE_MANAGER}" $@
}

function AddUserapt {
    addToSudoers=${3:-True}
    if [ $(UserExist ${1}) == False ]; then
        adduser --disabled-password --gecos "" "${1}"
        echo "${1}:${2}" | chpasswd

        # Add user to sudoers - default is True
        if [[ $addToSudoers == True ]]; then
            usermod -aG sudo "${1}"
            echo "${1} ALL=(root)NOPASSWD:ALL" | EDITOR='tee -a' visudo
            echo "Added user ${1}. Belogs to sudoers group".
        fi
    fi
}

function AddUseryum {
    addToSudoers=${3:-True}
    if [ $(UserExist ${1}) == False ]; then
        adduser -c "${1} user." "${1}"
        passwd -l "${1}"
        echo "${1}:${2}" | chpasswd

        # Add user to sudoers - default is True
        if [[ $addToSudoers == True ]]; then
            usermod -aG wheel "${1}"
            echo "${1} ALL=(root)NOPASSWD:ALL" | EDITOR='tee -a' visudo
            echo "Added user ${1}. Belogs to sudoers group".
        fi
    fi
}

function CreatePartition4lvm {
    device="$1"
    initial_size="${2:-50G}"
    size="${3:-50G}"
    [[ -z $device ]] && PrintError 'Must provide device full path'
    echo "Creating new partition on $device disk"
    parted $device --script print
    parted $device --script mkpart extending ext4 $initial_size $size
    parnum=$(sfdisk -l /dev/nvme0n1|tail -1|awk '{print $1}'|tail -c2)
    parted $device --script set $parnum lvm on
    parted $device --script print
}

function CheckBios {
: 'Check that system Bios version contains a given version pattern - via OS.
    [CentOS7.4 or WindowsServer2016]
    Positional parameters:
    1: BIOS version pattern.
    2: SystemName or IP to ssh into it.
    3: User to authenticate.
    4: Password to authenticate.
    Note: If user/password fail, will try default ssh-keys.
'
    biosv="{1}", sy="${2}"; user="${3}"; passw="${4}"
    CheckSsh $sy $user $passw 'False'
    [[ $_SSH_CMD == 'error' ]] && continue

    # Check BIOS
    $_SSH_CMD -q $user@$sy "uname" &>result
    cv=False
    if [[ $( cat result ) == 'Linux' ]]; then
        # if Linux
        cv=$( $_SSH_CMD $user@$sy \
        "dmidecode --type 0|grep Version|sed 's/.*Version:.//g'" )
    else
        # if Windows
        cv=$( $_SSH_CMD $user@$sy \
        "powershell; systeminfo | FINDSTR ^BIOS.Version" )
    fi
    rm -f result
    msg=" - $sy BIOS -"
    msg1="- Expected Version: $biosv, Current Version: $cv"
    [[ $cv =~ $biosv ]] && echo "$msg MATCHES" || echo "$msg NOT MATCH $msg1"
}

function CheckPing {
: 'Pings a system - Prints only one line to indicate either success or failure.
    Positional arguments:
    1: SystemName or IP to ping.
    Optional arguments:
    2: verbose
    Defaults to True.
        If True - Prints success or failure message.
        If False - Prints only failure message, supress success message
        If Raw - Prints the ping output as-is
    NOTE: SEE ALSO WaitForPing FUNCTION
'
    sy="${1}"; verbose="${2:-True}"
    result=$( ping -c 1 $sy )

    [[ $verbose == Raw ]] && echo $result && continue

    _reg='Destination Host Unreachable'
    msgS=" - $sy - Successful Ping"
    msgF=" - $sy - Failed Ping - Host Unreachable \n $result"
    [[ $result =~ $_reg ]] && echo -e "$msgF" || \
        [[ $verbose == True ]] && echo $msgS
}

function CheckSsh {
: 'Verify system connection via ssh - etiher with user/ password or ssh-keys
    [CentOS7.4 or WindowsServer2016]
    Positional arguments:
    1: SystemName or IP to ssh into.
    2: User to authenticate.
    Optional arguments:
    3: Password to authenticate.
    4: verbose
        Defaults to True.
        If True - Prints success or failure message.
        If False - Prints only failure message, supress success message
    Note: If user/password fail, will try default ssh-keys.
'
    sy="${1}"; user="${2}"; passw="${3}"; verbose="${4:-True}"
    # Check we can ssh - with user-password else try sshkeys
    _SSH_CMD="sshpass -p $passw ssh"
    sshpass -p $passw ssh $user@$sy "exit"
    if [[ $? -ne 0 ]]; then
        _SSH_CMD='ssh'
        ssh -o preferredAuthentications=publickey -q $user@$sy "exit"
        [[ $? -ne 0 ]] && echo "ERROR: UNABLE TO SSH $sy." && _SSH_CMD='error'
    fi
    [[ $_SSH_CMD != 'error' && $verbose == 'True' ]] && \
        echo " - $sy - Able to ssh"
}

function CheckVmm {
: 'Prints current available VMs details to validate its status.
    [CentOS7.4 or windowsServer2016]
    For linux - Done via virsh
    Positional arguments:
    1: SystemName or IP to ssh into.
    2: User to authenticate.
    3: Password to authenticate.
    Note: If user/password fail, will try default ssh-keys.
'
    sy="${1}"; user="${2}"; passw="${3}"
    CheckSsh $sy $user $passw 'False'
    [[ $_SSH_CMD == 'error' ]] && continue

    # Check vmm
    echo -e "\n\n - $sy - Reviewing VMs on system."
    $_SSH_CMD -q $user@$sy "uname" &>result

    if [[ $( cat result ) == 'Linux' ]]; then
        # IF LINUX SYSTEM
        # Print current VMs on the host
        vmms=$( $_SSH_CMD $user@$sy "virsh list --all" )
        echo "$vmms"
        [[ $vmms =~ "off" ]] && echo " - $sy - Error: something went wrong."
    else
        # IF WINDOWS SYSTEM
        # Print current VMs on the host
        $_SSH_CMD $user@$sy "powershell; get-vm"
        cmd='powershell; if(Select-String -Path c:/vms/vm_status.log
            -Pattern "heartbeat.failure") { exit 1 }; exit'
        $_SSH_CMD $user@$sy $cmd

        # On failure get vm_status.log file
        if [[ $? -ne 0 ]]; then
            fname="./${sy}.vm_status_$(date '+%Y_%m_%d_%H:%M:%S').log"
            echo " - $sy - Error: vm_status.log - HAVE HEARBEAT FAILURES"
            echo "Collecting file into $fname"
            sshpass -p $passw scp $user@$sy:C:/vms/vm_status.log ${fname}
        fi
    fi
    rm -f result
}

function CheckVtx {
    # Verify system has Intel Virtual Technology enabled - vtx
    if [[ ! -c '/dev/kvm' ]]; then
        PrintError "VTX must be enabled on the BIOS"
    fi
}

function CheckVtxS {
: 'Verifies system has Intel Virtual Technology enabled (aka vtx)
    TODO: Check also for vtd (direct I/O) via OS
    [CentOS7.4 or windowsServer2016]
    Positional arguments:
    1: SystemName or IP to ping.
    2: User to authenticate.
    3: Password to authenticate.
    Note: If user/password fail, will try default ssh-keys.
'
    sy="${1}"; user="${2}"; passw="${3}"
    CheckSsh $sy $user $passw 'False'
    [[ $_SSH_CMD == 'error' ]] && continue

    # Check Virtualization
    $_SSH_CMD -q $user@$sy "uname" &>result
    if [[ $( cat result ) == 'Linux' ]]; then
        # if Linux
        $_SSH_CMD $user@$sy "[[ -c '/dev/kvm' ]] && exit || exit 1"
    else
        # if Windows - Ensure hyperV reqs are met
        cmd='powershell; "if(systeminfo | FINDSTR ^Hyper-V* | FINDSTR .*No)
            { exit 1 }; exit"'
        $_SSH_CMD $user@$sy $cmd
    fi
    rm -f result
    msg=" - $sy - VTX"
    [[ $? -eq 0 ]]  && echo "$msg ENABLED" || echo "$msg NOT ENABLED"
}

function DisableIPV6 {
    if grep "all.disable_ipv6" /etc/sysctl.conf; then
        echo "net.ipv6.conf.all.disable_ipv6 = 1" | tee -a /etc/sysctl.conf
    fi
    if grep "default.disable_ipv6" /etc/sysctl.conf; then
        echo "net.ipv6.conf.default.disable_ipv6 = 1" | tee -a /etc/sysctl.conf
    fi
    sysctl -p
}

function DisableSelinux {
    setenforce 0
    sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
}

function DisableFirewalld {
    systemctl disable firewalld
    systemctl stop firewalld
}

function EnableNestedVirtualization {
    vendor_id=$(lscpu|grep "Vendor ID")
    if [[ $vendor_id == *GenuineIntel* ]]; then
        kvm_ok=$(cat /sys/module/kvm_intel/parameters/nested)
        if [[ $kvm_ok == 'N' ]]; then
            rmmod kvm-intel
            echo 'options kvm-intel nested=y'| tee -a /etc/modprobe.d/dist.conf
            modprobe kvm-intel
        fi
    else
        kvm_ok=$(cat /sys/module/kvm_amd/parameters/nested)
        if [[ $kvm_ok == '0' ]]; then
            rmmod kvm-amd
            echo 'options kvm-amd nested=1' | tee -a /etc/modprobe.d/dist.conf
            modprobe kvm-amd
        fi
    fi
    modprobe vhost_net
}

function EnsureNonRoot {
    # Ensure script is run as root
    if [ "$EUID" -eq "0" ]; then
        PrintError "This script must be run as NON root."
    fi
}

function EnsureRoot {
    # Ensure script is run as root
    if [ "$EUID" -ne "0" ]; then
        PrintError "This script must be run as root."
    fi
}

function GetRandomNumber {
    _RANDOM_NUMBER=$(awk -v min=500 -v max=10000 \
        'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
}

function HandleOptions {
    case "${1}" in
        --domain|-d)
            SetDomain "${2}"
            ;;
        --proxy|-x)
            SetProxy "${2}"
            ;;
        --help|-h)
            PrintHelp
            ;;
        *)
            PrintError "Invalid Argument."
    esac
    shift
}

function IsCentos {
    # Return True or False
    source /etc/os-release
    [[ $ID == 'centos' ]] && echo True || echo False
}

function IsUbuntu {
    # Return True or False
    source /etc/os-release
    [[ $ID == 'ubuntu' ]] && echo True || echo False
}

function IsTrusty {
    # Return True or False
    vc='trusty'
    [[ $(IsUbuntu) && $VERSION_CODENAME == $vc ]] && echo True || echo False
}

function IsXenial {
    # Return True or False
    vc='xenial'
    [[ $(IsUbuntu) && $VERSION_CODENAME == $vc ]] && echo True || echo False
}

function IsBionic {
    # Return True or False
    vc='bionic'
    [[ $(IsUbuntu) && $VERSION_CODENAME == $vc ]] && echo True || echo False
}

function PrintError {
:'Prints a given message as an error and quit execution
    Positional Arguments:
    1: Error message to be printed.
'
    echo "************************" >&2
    echo "* $(date +"%F %T.%N") ERROR: $1" >&2
    echo "************************" >&2
    exit 1
}

function PrintHelp {
:'Prints the Help for a commands.
    Positional Arguments:
    1. A description of script functionallity.
    2: The name of the script.
    3: String with additional script options help
'
    echo " "
    echo "Script: $1. Optionally uses given proxy"
    echo " "
    echo "Usage:"
    echo "./$2 [--proxy | -x <http://proxyserver:port>]"
    echo " "
    [[ ! -z $3 ]] && echo -e "$3"
    echo "     --domain | -d     Uses given domain when needed."
    echo "     --proxy  | -x     Uses given proxy server in the installation."
    echo "     --help            Prints current help text. "
    echo " "
    exit 1
}

function resize_lvm {
    [[ -z "$1" ]] && PrintError 'Must send device disk'
    device="$1"
    fdisk -l $device

    echo '--> Creating new physical volume'
    partition=$(sfdisk -d $device|tail -1|awk -F ':' '{print $1}'|tr -d ' ')
    pvcreate $partition
    pvs

    echo '--> Adding new Physical volume into volume group'
    vgname=$(vgs --noheadings -o vg_name | tr -d ' |\n')
    vgextend $vgname $partition
    vgs

    echo '--> Expanding home logical volume'
    lvpath=$(vgs --noheadings -o lv_path | grep home | tr -d ' |\n')
    ext_av=$(pvs $partition --noheadings -o seg_size_pe|tail -1|tr -d ' |\n')
    lvdisplay $lvpath
    lvextend -l "+$ext_av"  $lvpath
    lvdisplay $lvpath

    echo 'Resizing file system'
    if [[ -n $(parted $device --script print | grep xfs) ]]; then
        xfs_growfs $lvpath
    elif [[ -n $(parted $device --script print | grep ext4) ]]; then
        resize2fs $lvpath
    else [[ -n $(parted $device --script print | grep btrfs) ]]
        btrfs filesystem resize max $lvpath
    fi
}

function SetDomain {
    if [[ -z "${1}" || "${1}" == -* ]]; then
        PrintError "Function set_domain - Missing domain data."
    else
        _DOMAIN=",${1}"
    fi
}

function SetFirewallUFW {
    echo 'Display available apps'
    ufw app list
    echo 'Allow SSH connections'
    ufw allow OpenSSH
    ufw allow ssh
    echo 'Enable ufw firewall'
    echo yes | ufw enable
    ufw status
}

function SetKeyPair {
: 'Creates a key-pair unattended for root or other user
    Optional arguments:
    1: userName
        Defaults to root user.
'
    [[ -n $1 ]] && path="/home/$1" || path='/root'
    mkdir -p $path
    ssh-keygen -q -t rsa -b 4096 -C 'dlux keypair' -N "" -f "$path/.ssh/id_rsa"
    chown -R $1:$1 $path/.ssh/
}

function SetLocale {
:' Sets locale to US.
    Positional arguments:
    1: Home directory to be exported.
'
    Set locale
    locale-gen en_US
    update-locale
    export HOME=$1
}

function SetPackageManager {
# Discover os_family and set package manager
# accordingly [apt | yum]
# optionally pass manager as parameter
#distro="${1:-$(lsb_release -is)}"
    source /etc/os-release || source /usr/lib/os-release
    distro="${1:-$ID}"

    case ${distro,,} in
        rhel|centos|fedora|yum)
            _PACKAGE_MANAGER="$(which dnf 2>/dev/null || which yum)"
            _INSTALLER_CMD="${_PACKAGE_MANAGER} -y install"
            _PACKAGE_MANAGER="$(echo $_PACKAGE_MANAGER | sed 's/.*\///g')"
        ;;

        ubuntu|debian)
            _PACKAGE_MANAGER='apt'
            _INSTALLER_CMD='apt-get install -y'
        ;;

        *suse)
            _PACKAGE_MANAGER='zypper'
            _INSTALLER_CMD='zypper install -y'
        ;;

        *)
            PrintError "Unknown package manager for distro: $distro"
    esac
}

function SetProxy {
: 'Sets a proxy for package manager and as envVar
    Positional arguments:
    1: Proxy - sintasix http://server:port
'
    if [[ -z "${1}" || "${1}" == -* ]]; then
        PrintError "Function set_proxy - Missing proxy data."
    fi

    SetPackageManager
    SetProxyOn"${_PACKAGE_MANAGER}"Conf "$@"

    _ORIGINAL_PROXY="${1}"
    npx="127.0.0.1,localhost,10.0.0.0/8,192.168.0.0/16${_DOMAIN}"
    _PROXY="http_proxy=${1} https_proxy=${1} no_proxy=${npx}"
    _PROXY="$_PROXY HTTP_PROXY=${1} HTTPS_PROXY=${1} NO_PROXY=${npx}"

    SetProxyOnFile
    source ".PROXY"
}

function SetProxyOnaptConf {
    if [ -f /etc/apt/apt.conf ]; then
        echo "Acquire::http::Proxy \"${1}\";" >> /etc/apt/apt.conf
    elif [ -d /etc/apt/apt.conf.d ]; then
        fil='/etc/apt/apt.conf.d/70proxy.conf'
        echo "Acquire::http::Proxy \"${1}\";" >> $fil
    fi
}

function SetProxyOnyumConf {
    if grep 'proxy' /etc/yum.conf; then
        return
    fi
    echo "proxy=${1}" >> /etc/yum.conf
}

function SetProxyOnFile {
    echo " $_PROXY" | sed "s/ /\nexport /g" > .PROXY
}

function UpdatePackageManager {
    SetPackageManager
    Update"${_PACKAGE_MANAGER}"PackageManager
}

function UpdateaptPackageManager {
    apt-get update
}

function UpdateyumPackageManager {
    yum clean expire-cache
    #yum check-update
    #yum -y update
    yum -y --security update
}

function UnsetProxy {
    UnsetProxyOn"${_PACKAGE_MANAGER}"Conf "$@"
}

function UnsetProxyOnaptConf {
    # Cleanup proxy from apt. If any, remove the first coincedence
    if [[ ! -z "${1}" ]]; then
        scaped_str=$(echo $1 | sed -s 's/[\/&]/\\&/g')
        if [ -f /etc/apt/apt.conf ]; then
            sed -i "0,/$scaped_str/{/$scaped_str/d;}" /etc/apt/apt.conf
        elif [ -d /etc/apt/apt.conf.d ]; then
            fil='/etc/apt/apt.conf.d/70proxy.conf'
            sed -i "0,/$scaped_str/{/$scaped_str/d;}" $fil
        fi
    fi
}

function UnsetProxyOnyumConf {
    # Cleanup proxy from yum. If any, remove the first coincedence
    scaped_str=$(echo "proxy=$1" | sed -s 's/[\/&]/\\&/g')
    sed -i "0,/$scaped_str/{/$scaped_str/d;}" /etc/yum.conf
}

function UserExist {
    [[ -n $(compgen -u | grep -i "${1}") ]] && echo True || echo False
}

function ValidIP {
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi

    echo $stat
}

function WaitForPing {
    ip=$1
    timeout=${2:-360}
    initial_time=$(date +%s)
    elapsed_time=$timeout

    while [ "$elapsed_time" -le "$timeout" ]; do
        ping -q -c 1 ${ip}

        rc=$?
        if [[ $rc -eq  1 ]]; then
            echo "Ping is replying now"
            break
        fi
        sleep 1
        current_time=$(date +%s)
        elapsed_time=$((current_time-initial_time))
    done

    return $rc
}

function WriteLog {
    [[ -z $log_file ]] && log_file=/var/log/install.log
    echo -e "$(date +"%F %T.%N") - $1" 2>&1 | tee -a $log_file
}

